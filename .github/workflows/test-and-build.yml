name: Test & Build Images

on:
  push:
    branches: [master]
  pull_request_target:
    branches: [master]

jobs:
  Test_Backend:
    name: Test Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    strategy:
      matrix:
        python-version: [3.8, 3.9]
    services:
      elasticsearch:
        image: elasticsearch:7.10.1
        env:
          bootstrap.memory_lock: true
          ES_JAVA_OPTS: -Xms1024m -Xmx1024m
          discovery.type: single-node
        ports:
          - 9200:9200

      postgresql:
        image: postgres:9.6
        env:
          POSTGRES_USER: cat
          POSTGRES_PASSWORD: cat
          POSTGRES_DB: cat
        ports:
          - 5432:5432
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Show python dependencies
        run: |
          pip freeze

      - name: Run tests
        run: |
          poetry run python manage.py test

  Test_Harvest:
    name: Test Harvest
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: harvest
    strategy:
      matrix:
        python-version: [3.8, 3.9]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Show python dependencies
        run: |
          pip freeze

      - name: Run tests
        run: |
          poetry run pytest tests

  backend_build:
    name: Backend build
    runs-on: ubuntu-latest
    needs: [Test_Harvest, Test_Backend]
    if: ${{ github.event_name == 'push' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          registry: registry.cern.ch
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./backend/
          registry: registry.cern.ch
          push: true
          tags: registry.cern.ch/cern-sis/cat-backend:latest,registry.cern.ch/cern-sis/cat-backend:${{ github.sha }}

      - name: Deploy QA
        uses: peter-evans/repository-dispatch@v1
        if: ${{ github.event_name == 'push'}}
        with:
          token: ${{ secrets.INSPIRE_BOT_TOKEN }}
          repository: cern-sis/kubernetes
          event-type: deploy
          client-payload: '{"project": "cat", "application":"cat-backend", "namespace": "cat-qa", "image":"registry.cern.ch/cern-sis/cat-backend","new_tag":"${{ github.sha }}"}'

  ui_build:
    name: UI build
    runs-on: ubuntu-latest
    needs: [Test_Harvest, Test_Backend]
    if: ${{ github.event_name == 'push' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          registry: registry.cern.ch
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./ui/
          registry: registry.cern.ch
          push: true
          tags: registry.cern.ch/cern-sis/cat-ui:latest,registry.cern.ch/cern-sis/cat-ui:${{ github.sha }}

      - name: Deploy QA
        uses: peter-evans/repository-dispatch@v1
        if: ${{ github.event_name == 'push'}}
        with:
          token: ${{ secrets.INSPIRE_BOT_TOKEN }}
          repository: cern-sis/kubernetes
          event-type: deploy
          client-payload: '{"project": "cat", "application":"cat-ui", "namespace": "cat-qa","image":"registry.cern.ch/cern-sis/cat-ui","new_tag":"${{ github.sha }}"}'

  harvest_build:
    name: Harvest build
    runs-on: ubuntu-latest
    needs: [Test_Harvest, Test_Backend]
    if: ${{ github.event_name == 'push' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          registry: registry.cern.ch
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./harvest/
          registry: registry.cern.ch
          push: true
          tags: registry.cern.ch/cern-sis/cat-harvest:latest,registry.cern.ch/cern-sis/cat-harvest:${{ github.sha }}

      - name: Deploy QA
        uses: peter-evans/repository-dispatch@v1
        if: ${{ github.event_name == 'push'}}
        with:
          token: ${{ secrets.INSPIRE_BOT_TOKEN }}
          repository: cern-sis/kubernetes
          event-type: deploy
          client-payload: '{"project": "cat", "application":"cat-harvest", "namespace": "cat-qa", "image":"registry.cern.ch/cern-sis/cat-harvest","new_tag":"${{ github.sha }}"}'
